# This GitHub action runs your tests for each commit push and/or PR. Optionally
# you can turn it on using a cron schedule for regular testing.
#
name: Tests
on:
  pull_request:
    branches:
      - 'main'
  push:
    branches:
      - '*'
      - '!main'
    paths-ignore:
      - 'README.md'

env:
  go-version: '1.19'

jobs:
  # ensure the code builds...
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.go-version }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4.0.0

    - name: Get dependencies
      run: |
        go mod download

    - name: Build
      run: |
        go build -v .

  # run acceptance tests in a matrix with Terraform core versions
  test:
    name: Matrix Test
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        # list whatever Terraform versions here you would like to support
        terraform:
          - '0.12.31'
          - '0.13.7'
          - '0.14.11'
          - '0.15.5'
          - '1.0.11'
          - '1.1.9'
          - '1.2.9'
          - 'latest'
    steps:

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.go-version }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4.0.0

    - name: Get dependencies
      run: |
        go mod download
        
    - name: TF acceptance tests
      timeout-minutes: 10
      env:
        TF_ACC: "1"
        TF_ACC_TERRAFORM_VERSION: ${{ matrix.terraform }}

        # Set whatever additional acceptance test env vars here. You can
        # optionally use data from your repository secrets using the
        # following syntax:
        # SOME_VAR: ${{ secrets.SOME_VAR }}

      run: |
        go test -v -cover ./internal/provider/

  matrixresult:
    name: Matrix Result
    needs: test
    runs-on: ubuntu-latest
    steps:
      - run: |
          result="${{ needs.test.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi
